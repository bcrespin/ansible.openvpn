---
- name: Create configuration directory
  file: > 
    path={{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}
    state=directory
    mode=0755
    owner=root
    group="{{ openvpn_root_group }}"

- name: Create log directory
  file: >
    path="{{ openvpn_log_dir }}" state=directory owner=root group="{{ openvpn_root_group }}" mode=0700 state=directory

- name: Create keys directory
  file: >
    path="{{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{ __my_openvpn_instance.openvpn_keydir }}"
    state=directory
    owner=root
    group="{{ openvpn_root_group }}"
    mode=0700

- name: Create clients directory
  file: >
    path="{{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{ __my_openvpn_instance.openvpn_clients_config_dir }}"
    state=directory
    owner=root
    group="{{ openvpn_group }}"
    mode=0755
    
- name: clients ccd content
  template: src=ccd_file.j2 dest={{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{ __my_openvpn_instance.openvpn_clients_config_dir }}/{{ item.key }}
  with_dict: "{{ __my_openvpn_instance.openvpn_clients_config|default({}) }}"

- name: Configure PKI for the server (easyrsa)
  include: configure.pki_server.yml
  when:
    - not __my_openvpn_instance.openvpn_use_external_pki

- name: Configure PKI for the server (easyrsa)
  include: configure.pki_server.yml
  when:
    - not __my_openvpn_instance.openvpn_use_external_pki

- name: PKI for the clients (easyrsa)
  include: configure.pki_clients.yml
  when:
    - not __my_openvpn_instance.openvpn_use_external_pki
    - __my_openvpn_instance.openvpn_use_certs

- name: Generate tls-auth key
  command: openvpn --genkey --secret {{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{__my_openvpn_instance.openvpn_keydir }}/ta.key
  args: 
    creates: "{{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{__my_openvpn_instance.openvpn_keydir }}/ta.key"
  when: __my_openvpn_instance.openvpn_tls_auth

- name: Script auth-user-pass-verify
  template: >
    src=auth-user-pass-verify.sh.j2
    dest={{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/auth-user-pass-verify.sh
    mode=0750
    owner=root group={{ openvpn_group }}
  when: 
   ( __my_openvpn_instance.openvpn_check_username_in_cert ) or
   ( __my_openvpn_instance.openvpn_use_simple_auth ) or
   ( __my_openvpn_instance.openvpn_use_auth_file )

- name: openvpn PAM file
  template: >
    src=pam.j2
    dest={{ openvpn_system_etcdir }}/pam.d/{{ __openvpn_service_name }}
    mode=0640
    owner=root group={{ openvpn_group }}
  when:
    - __my_openvpn_instance.openvpn_use_pam
  
- name: add virtual users in openvpn PAM password file
  htpasswd: >
    path="{{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/pam_users.txt"
    name={{ item.name }}
    password={{ item.password }}
    crypt_scheme=md5_crypt
  with_items: "{{ __my_openvpn_instance.openvpn_use_pam_users  }}"
  when: 
    - __my_openvpn_instance.openvpn_use_pam
    - __my_openvpn_instance.openvpn_use_pam_users

- name: remove virtual users in openvpn PAM password file
  htpasswd: >
    path="{{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/pam_users.txt"
    name={{ item.name }}
    state=absent
  with_items: "{{ __my_openvpn_instance.openvpn_use_pam_users_remove  }}"
  when:
    - __my_openvpn_instance.openvpn_use_pam
    - __my_openvpn_instance.openvpn_use_pam_users_remove

- name: Populate auth file
  template: src=auth_file.j2 dest={{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/auth_file  mode=0750 owner=root group={{ openvpn_group }}
  when:
   - __my_openvpn_instance.openvpn_use_auth_file
   - __my_openvpn_instance.openvpn_use_auth_file_users != []

- name: Configuration file
  template: src=server.conf.j2 dest={{ openvpn_system_etcdir }}/{{ __openvpn_service_name }}/{{ openvpn_default_instance_name }}.conf
  register: taskresult

- include: detect_instance_update.yml

- name: Set ip forwarding
  sysctl: name={{ sysctl_inet_forward }}  value=1 sysctl_set=yes state=present reload=yes

# should be before the last action for server part!!
- name: Configure service
  include: configure.service.yml

# should be the last action part !!
- name: restart service {{ __openvpn_service_name }}
  service: name={{ __openvpn_service_name }} enabled=yes state=restarted
  when:
    - __openvpn_instance_update|default(false)

- name: clients configuration stuff
  include: clients_configs.yml
